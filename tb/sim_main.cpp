#include "Vsim_top.h"         // Header generated by Verilator for our top module
#include "verilated.h"        // Core Verilator definitions
#include "verilated_vcd_c.h"  // VCD tracing header

// This is a C++ macro to create a string from a macro definition
// We use it to get the path of the firmware hex file from the Makefile
#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)

int main(int argc, char ** argv)
{
  // Initialize Verilator
  Verilated::commandArgs(argc, argv);

  // Instantiate our design
  Vsim_top * top = new Vsim_top;

  // Enable VCD tracing
  Verilated::traceEverOn(true);
  VerilatedVcdC * tfp = new VerilatedVcdC;
  top->trace(tfp, 99);  // Trace 99 levels of hierarchy
  tfp->open("waveform.vcd");

  // Initialize simulation variables
  vluint64_t main_time = 0;  // Current simulation time
  const vluint64_t sim_duration = 1500;

  // Set initial state
  top->clk = 0;
  top->reset = 1;  // Reset is active-low

  // --- Reset Sequence ---
  // Hold reset for a few cycles
  while (main_time < 10) {
    if (main_time > 1 && main_time < 6) {
      top->reset = 0;  // Assert reset
    } else {
      top->reset = 1;  // De-assert reset
    }
    top->eval();
    tfp->dump(main_time);
    main_time++;
  }

  // --- Main Simulation Loop ---
  while (main_time < sim_duration && !Verilated::gotFinish()) {
    // Toggle the clock
    top->clk = !top->clk;

    // Evaluate the model
    top->eval();

    // Dump waveform data
    tfp->dump(main_time);

    // Advance time
    main_time++;
  }

  // Clean up
  tfp->close();
  delete top;

  return 0;
}
